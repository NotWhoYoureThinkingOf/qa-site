{"mappings":"ACAA,IAAI,EAAO,EAAE,CAEb,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,MAAM,sCACL,IAAI,CAAC,AAAA,IACF,GAAI,CAAC,EAAS,EAAE,CACZ,MAAM,AAAI,MAAM,CAAC,oBAAoB,EAAE,EAAS,MAAM,CAAC,CAAC,EAE5D,OAAO,EAAS,IAAI,EACxB,GACC,IAAI,CAAC,AAAA,IACF,GAAI,CACA,IAAM,EAAW,KAAK,KAAK,CAAC,IAC5B,AAWZ,SAAyB,CAAQ,EAC7B,GAAI,CAAC,MAAM,OAAO,CAAC,GAAW,CAC1B,QAAQ,KAAK,CAAC,6BAA8B,GAC5C,MACJ,CAEA,IAAM,EAAoB,SAAS,cAAc,CAAC,iBAGlD,CAAA,EAAkB,SAAS,CAAG,GAE9B,EAAS,OAAO,CAAC,AAAA,IACb,IAAM,EAAiB,SAAS,aAAa,CAAC,MAC9C,CAAA,EAAe,SAAS,CAAG,gBAE3B,EAAe,SAAS,CAAG,CAAC;sBACd,EAAE,EAAQ,SAAS,CAAC,OAAO,EAAE,EAAQ,IAAI,CAAC;gBAChD,EAAE,EAAQ,IAAI,CAAC;uBACR,EAAE,EAAQ,KAAK,CAAC,OAAO,CAAC,GAAG;QAC1C,CAAC,CAED,EAAe,gBAAgB,CAAC,QAAS,KACrC,EAAU,EACd,GAEA,EAAkB,WAAW,CAAC,EAClC,EACJ,EAtC4B,EACpB,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,sBAAuB,EACzC,CACJ,GACC,KAAK,CAAC,AAAA,IACH,QAAQ,KAAK,CAAC,2BAA4B,EAC9C,EACJ,GAgCA,MAAM,EAAY,AAAC,IAEf,IAAM,EAAe,EAAK,IAAI,CAAC,AAAA,GAAY,EAAS,EAAE,GAAK,EAAK,EAAE,EAE9D,EAEA,EAAa,QAAQ,EAAI,EAGzB,EAAK,IAAI,CAAC,GAGd,GACJ,EAsBM,EAAa,KACf,IAAM,EAAgB,SAAS,cAAc,CAAC,cAG9C,GAFA,EAAc,SAAS,CAAG,GAEtB,AAAgB,IAAhB,EAAK,MAAM,CAAQ,CAEnB,EAAc,WAAW,CAAG,qBAC5B,MACJ,CAEA,EAAK,OAAO,CAAC,AAAA,IAET,IAAM,EAAW,SAAS,aAAa,CAAC,MACxC,CAAA,EAAS,SAAS,CAAG,YACrB,EAAS,WAAW,CAAG,CAAC,EAAE,EAAK,IAAI,CAAC,GAAG,EAAE,EAAK,QAAQ,CAAC,IAAI,EAAE,EAAK,KAAK,CAAC,CAAC,CAGzE,IAAM,EAAY,SAAS,aAAa,CAAC,SACzC,CAAA,EAAU,SAAS,CAAG,YACtB,EAAU,WAAW,CAAG,SACxB,EAAU,OAAO,CAAG,IAAM,EAAe,EAAK,EAAE,EAEhD,EAAS,WAAW,CAAC,GACrB,EAAc,WAAW,CAAC,EAC9B,GAEA,IAAM,EAAa,EAAK,MAAM,CAAC,CAAC,EAAO,IAAS,EAAQ,EAAK,KAAK,CAAG,EAAK,QAAQ,CAAE,GAC9E,EAAe,SAAS,aAAa,CAAC,MAC5C,CAAA,EAAa,SAAS,CAAG,aACzB,EAAa,WAAW,CAAG,CAAC,QAAQ,EAAE,EAAW,OAAO,CAAC,GAAG,CAAC,CAC7D,EAAc,WAAW,CAAC,EAC9B,EAEM,EAAiB,AAAC,IAEpB,IAAM,EAAO,EAAK,IAAI,CAAC,AAAA,GAAY,EAAS,EAAE,EAAI,GAElD,GAAG,EAAM,CACL,GAAI,EAAK,QAAQ,CAAG,EAEhB,EAAK,QAAQ,EAAI,MACd,CAEH,IAAM,EAAY,EAAK,SAAS,CAAC,AAAA,GAAY,EAAS,EAAE,EAAI,GACxD,EAAY,IACZ,EAAK,MAAM,CAAC,EAAW,EAE/B,CAGA,GACJ,CACJ","sources":["<anon>","frontend/src/app.js"],"sourcesContent":["let cart = [];\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    fetch(\"http://localhost:3000/api/products\").then((response)=>{\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.text(); // Get response as text for debugging\n    }).then((responseText)=>{\n        try {\n            const products = JSON.parse(responseText); // Parse JSON from text\n            displayProducts(products);\n        } catch (error) {\n            console.error(\"Error parsing JSON:\", error);\n        }\n    }).catch((error)=>{\n        console.error(\"Error fetching products:\", error);\n    });\n});\n// Function to display the products\nfunction displayProducts(products) {\n    if (!Array.isArray(products)) {\n        console.error(\"Expected an array but got:\", products);\n        return;\n    }\n    const productsContainer = document.getElementById(\"clothing-items\");\n    // Clear any existing products in the container\n    productsContainer.innerHTML = \"\";\n    products.forEach((product)=>{\n        const productElement = document.createElement(\"div\");\n        productElement.className = \"clothing-item\";\n        productElement.innerHTML = `\r\n            <img src=\"${product.image_url}\" alt=\"${product.name}\" style=\"width: 50px; height: 50px\">\r\n            <h4>${product.name}</h4>\r\n            <p>Price: $${product.price.toFixed(2)}</p>\r\n        `;\n        productElement.addEventListener(\"click\", ()=>{\n            addToCart(product);\n        });\n        productsContainer.appendChild(productElement);\n    });\n}\nconst addToCart = (item)=>{\n    // Check if the item is already in the cart\n    const existingItem = cart.find((cartItem)=>cartItem.id === item.id);\n    if (existingItem) // If the item exists, increase the quantity\n    existingItem.quantity += 1;\n    else // If the item does not exist, add it to the cart\n    cart.push(item);\n    updateCart();\n};\nconst clearCart = ()=>{\n    cart = [];\n    const cartContainer = document.getElementById(\"cart-items\");\n    cartContainer.innerHTML = \"\"; // clear all previous content\n    updateCart();\n};\nconst buyCart = ()=>{\n    cart = [];\n    const cartContainer = document.getElementById(\"cart-items\");\n    cartContainer.innerHTML = \"\"; // clear all previous content\n    updateCart();\n    cartContainer.innerHTML = \"Thank you!\";\n};\nconst updateCart = ()=>{\n    const cartContainer = document.getElementById(\"cart-items\");\n    cartContainer.innerHTML = \"\"; // clear all previous content\n    if (cart.length === 0) {\n        // if cart is empty, show empty text\n        cartContainer.textContent = \"Your cart is empty\";\n        return;\n    }\n    cart.forEach((item)=>{\n        // For each item in the cart, we take that item, create a div for it, give it a class of 'cart-item', show text of the item name, quantity and price. Then we add that div as a while to UI of the cart.\n        const cartItem = document.createElement(\"div\");\n        cartItem.className = \"cart-item\";\n        cartItem.textContent = `${item.name} - ${item.quantity} x $${item.price}`;\n        // remove button\n        const removeBtn = document.createElement(\"button\");\n        removeBtn.className = \"removeBtn\";\n        removeBtn.textContent = \"Remove\";\n        removeBtn.onclick = ()=>removeFromCart(item.id);\n        cartItem.appendChild(removeBtn);\n        cartContainer.appendChild(cartItem);\n    });\n    const totalPrice = cart.reduce((total, item)=>total + item.price * item.quantity, 0);\n    const totalElement = document.createElement(\"div\");\n    totalElement.className = \"cart-total\";\n    totalElement.textContent = `Total: $${totalPrice.toFixed(2)}`;\n    cartContainer.appendChild(totalElement);\n};\nconst removeFromCart = (itemId)=>{\n    // Find index of item to remove\n    const item = cart.find((cartItem)=>cartItem.id == itemId);\n    if (item) {\n        if (item.quantity > 1) // decrease quantity if more than 1\n        item.quantity -= 1;\n        else {\n            // Remove item from cart if quantity is 1\n            const itemIndex = cart.findIndex((cartItem)=>cartItem.id == itemId);\n            if (itemIndex > -1) cart.splice(itemIndex, 1);\n        }\n        // Update the UI\n        updateCart();\n    }\n};\n\n//# sourceMappingURL=index.c979484d.js.map\n","let cart = [];\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    fetch('http://localhost:3000/api/products')\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.text(); // Get response as text for debugging\r\n    })\r\n    .then(responseText => {\r\n        try {\r\n            const products = JSON.parse(responseText); // Parse JSON from text\r\n            displayProducts(products);\r\n        } catch (error) {\r\n            console.error('Error parsing JSON:', error);\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error('Error fetching products:', error);\r\n    });\r\n})\r\n\r\n// Function to display the products\r\nfunction displayProducts(products) {\r\n    if (!Array.isArray(products)) {\r\n        console.error('Expected an array but got:', products);\r\n        return;\r\n    }\r\n\r\n    const productsContainer = document.getElementById('clothing-items')\r\n\r\n    // Clear any existing products in the container\r\n    productsContainer.innerHTML = '';\r\n\r\n    products.forEach(product => {\r\n        const productElement = document.createElement('div');\r\n        productElement.className = 'clothing-item'\r\n\r\n        productElement.innerHTML = `\r\n            <img src=\"${product.image_url}\" alt=\"${product.name}\" style=\"width: 50px; height: 50px\">\r\n            <h4>${product.name}</h4>\r\n            <p>Price: $${product.price.toFixed(2)}</p>\r\n        `;\r\n\r\n        productElement.addEventListener('click', () => {\r\n            addToCart(product)\r\n        })\r\n\r\n        productsContainer.appendChild(productElement);\r\n    })\r\n}\r\n\r\nconst addToCart = (item) => {\r\n    // Check if the item is already in the cart\r\n    const existingItem = cart.find(cartItem => cartItem.id === item.id)\r\n\r\n    if (existingItem) {\r\n        // If the item exists, increase the quantity\r\n        existingItem.quantity += 1;\r\n    } else {\r\n        // If the item does not exist, add it to the cart\r\n        cart.push(item)\r\n    }\r\n\r\n    updateCart()\r\n}\r\n\r\nconst clearCart = () => {\r\n    cart = [];\r\n\r\n    const cartContainer = document.getElementById('cart-items');\r\n    cartContainer.innerHTML = ''; // clear all previous content\r\n\r\n    updateCart()\r\n}\r\n\r\nconst buyCart = () => {\r\n    cart = [];\r\n\r\n    const cartContainer = document.getElementById('cart-items');\r\n    cartContainer.innerHTML = ''; // clear all previous content\r\n\r\n    updateCart()\r\n\r\n    cartContainer.innerHTML = 'Thank you!'\r\n}\r\n\r\nconst updateCart = () => {\r\n    const cartContainer = document.getElementById('cart-items');\r\n    cartContainer.innerHTML = ''; // clear all previous content\r\n\r\n    if (cart.length === 0) {\r\n        // if cart is empty, show empty text\r\n        cartContainer.textContent = \"Your cart is empty\";\r\n        return;\r\n    }\r\n\r\n    cart.forEach(item => {\r\n        // For each item in the cart, we take that item, create a div for it, give it a class of 'cart-item', show text of the item name, quantity and price. Then we add that div as a while to UI of the cart.\r\n        const cartItem = document.createElement('div');\r\n        cartItem.className = 'cart-item';\r\n        cartItem.textContent = `${item.name} - ${item.quantity} x $${item.price}`;\r\n\r\n        // remove button\r\n        const removeBtn = document.createElement('button');\r\n        removeBtn.className = \"removeBtn\"\r\n        removeBtn.textContent = 'Remove';\r\n        removeBtn.onclick = () => removeFromCart(item.id);\r\n\r\n        cartItem.appendChild(removeBtn)\r\n        cartContainer.appendChild(cartItem);\r\n    })\r\n\r\n    const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);\r\n    const totalElement = document.createElement('div');\r\n    totalElement.className = 'cart-total';\r\n    totalElement.textContent = `Total: $${totalPrice.toFixed(2)}`;\r\n    cartContainer.appendChild(totalElement);\r\n}\r\n\r\nconst removeFromCart = (itemId) => {\r\n    // Find index of item to remove\r\n    const item = cart.find(cartItem => cartItem.id == itemId);\r\n\r\n    if(item) {\r\n        if (item.quantity > 1) {\r\n            // decrease quantity if more than 1\r\n            item.quantity -= 1;\r\n        } else {\r\n            // Remove item from cart if quantity is 1\r\n            const itemIndex = cart.findIndex(cartItem => cartItem.id == itemId)\r\n            if (itemIndex > -1) {\r\n                cart.splice(itemIndex, 1);\r\n            }\r\n        }\r\n\r\n        // Update the UI\r\n        updateCart()\r\n    }\r\n}\r\n\r\n"],"names":["cart","document","addEventListener","fetch","then","response","ok","Error","status","text","responseText","products","JSON","parse","displayProducts","Array","isArray","console","error","productsContainer","getElementById","innerHTML","forEach","product","productElement","createElement","className","image_url","name","price","toFixed","addToCart","appendChild","catch","item","existingItem","find","cartItem","id","quantity","push","updateCart","cartContainer","length","textContent","removeBtn","onclick","removeFromCart","totalPrice","reduce","total","totalElement","itemId","itemIndex","findIndex","splice"],"version":3,"file":"index.c979484d.js.map"}